#   Licensed to the Apache Software Foundation (ASF) under one
#   or more contributor license agreements.  See the NOTICE file
#   distributed with this work for additional information
#   regarding copyright ownership.  The ASF licenses this file
#   to you under the Apache License, Version 2.0 (the
#   "License"); you may not use this file except in compliance
#   with the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# beam-playground:
#   name: CombineFn
#   description: Task from katas averaging.
#   multifile: false
#   context_line: 30
#   categories:
#     - Combiners

import apache_beam as beam

from log_elements import LogElements


class AverageFn(beam.CombineFn):


    def create_accumulator(self, *args, **kwargs):
        total = 0.0
        count = 0
        accumulator = total, count
        return accumulator


    def add_input(self, mutable_accumulator, element, *args, **kwargs):
        total, count = mutable_accumulator
        return total + element, count + 1


    def merge_accumulators(self, accumulators, *args, **kwargs):
        total, count = zip(*accumulators)
        return sum(total), sum(count)


    def extract_output(self, accumulator, *args, **kwargs):
        final_total, final_count = accumulator
        return final_total / final_count


with beam.Pipeline() as p:

  (p | beam.Create([10, 20, 50, 70, 90])
     | beam.CombineGlobally(AverageFn())
     | LogElements())

